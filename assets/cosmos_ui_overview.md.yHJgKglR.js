import{_ as i,c as l,o as n,ag as e}from"./chunks/framework.C4nOkCZI.js";const c=JSON.parse('{"title":"XiHan UI 组件概述","description":"","frontmatter":{},"headers":[],"relativePath":"cosmos/ui/overview.md","filePath":"cosmos/ui/overview.md","lastUpdated":1747783171000}'),s={name:"cosmos/ui/overview.md"};function t(r,a,o,p,h,u){return n(),l("div",null,[...a[0]||(a[0]=[e(`<h1 id="xihan-ui-组件概述" tabindex="-1">XiHan UI 组件概述 <a class="header-anchor" href="#xihan-ui-组件概述" aria-label="Permalink to &quot;XiHan UI 组件概述&quot;">​</a></h1><p>XiHan UI 是一个基于 Vue 3 开发的现代化 UI 组件库，专注于提供美观、易用且高性能的用户界面组件。组件库遵循一致的设计语言和交互模式，帮助开发者快速构建专业的应用界面。</p><h2 id="设计原则" tabindex="-1">设计原则 <a class="header-anchor" href="#设计原则" aria-label="Permalink to &quot;设计原则&quot;">​</a></h2><p>XiHan UI 的设计遵循以下核心原则：</p><ul><li><strong>简洁统一</strong>：保持视觉语言一致，减少不必要的装饰，让用户专注于内容</li><li><strong>直观易用</strong>：组件的交互方式符合用户的预期，降低学习成本</li><li><strong>灵活可定制</strong>：提供丰富的配置项和主题定制能力，满足不同场景的需求</li><li><strong>性能优先</strong>：优化组件的渲染性能，确保在大数据量场景下仍保持流畅</li><li><strong>响应式设计</strong>：组件自适应不同尺寸的屏幕，提供优秀的多端体验</li></ul><h2 id="组件架构" tabindex="-1">组件架构 <a class="header-anchor" href="#组件架构" aria-label="Permalink to &quot;组件架构&quot;">​</a></h2><p>XiHan UI 采用模块化的组件架构，每个组件由以下几个部分组成：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>components/button/</span></span>
<span class="line"><span>├── src/              # 组件源码</span></span>
<span class="line"><span>│   ├── button.vue    # 主组件</span></span>
<span class="line"><span>│   ├── button-group.vue # 子组件</span></span>
<span class="line"><span>│   └── types.ts      # 类型定义</span></span>
<span class="line"><span>├── styles/           # 样式文件</span></span>
<span class="line"><span>│   ├── index.ts      # 样式入口</span></span>
<span class="line"><span>│   └── css/          # CSS 样式</span></span>
<span class="line"><span>└── __tests__/        # 测试文件</span></span>
<span class="line"><span>    └── button.test.ts # 单元测试</span></span></code></pre></div><h3 id="组件生命周期" tabindex="-1">组件生命周期 <a class="header-anchor" href="#组件生命周期" aria-label="Permalink to &quot;组件生命周期&quot;">​</a></h3><p>XiHan UI 组件的生命周期与 Vue 3 组件的生命周期相同，主要包括：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>初始化阶段 → 挂载阶段 → 更新阶段 → 卸载阶段</span></span>
<span class="line"><span></span></span>
<span class="line"><span>初始化: setup() → beforeCreate → created</span></span>
<span class="line"><span>挂载: beforeMount → mounted</span></span>
<span class="line"><span>更新: beforeUpdate → updated</span></span>
<span class="line"><span>卸载: beforeUnmount → unmounted</span></span></code></pre></div><h2 id="组件开发流程" tabindex="-1">组件开发流程 <a class="header-anchor" href="#组件开发流程" aria-label="Permalink to &quot;组件开发流程&quot;">​</a></h2><p>XiHan UI 的组件开发遵循以下流程：</p><ol><li><strong>需求分析</strong>：确定组件的功能、API 设计和交互方式</li><li><strong>原型设计</strong>：制作组件的设计原型，确定视觉风格</li><li><strong>组件实现</strong>：使用 Vue 3 + TypeScript 实现组件逻辑</li><li><strong>单元测试</strong>：编写单元测试，确保组件功能正确</li><li><strong>文档编写</strong>：编写组件使用文档和示例</li><li><strong>性能优化</strong>：优化组件性能，确保高效运行</li><li><strong>发布集成</strong>：将组件集成到组件库并发布</li></ol><h2 id="组件分类" tabindex="-1">组件分类 <a class="header-anchor" href="#组件分类" aria-label="Permalink to &quot;组件分类&quot;">​</a></h2><p>XiHan UI 提供了丰富的组件，按照功能可分为以下几类：</p><h3 id="基础组件" tabindex="-1">基础组件 <a class="header-anchor" href="#基础组件" aria-label="Permalink to &quot;基础组件&quot;">​</a></h3><p>基础组件是构建用户界面的基础元素，包括：</p><ul><li>Button（按钮）</li><li>Typography（排版）</li><li>Icon（图标）</li><li>Grid（栅格）</li><li>Layout（布局）</li><li>Space（间距）</li><li>Divider（分割线）</li></ul><h3 id="表单组件" tabindex="-1">表单组件 <a class="header-anchor" href="#表单组件" aria-label="Permalink to &quot;表单组件&quot;">​</a></h3><p>表单组件用于数据录入和交互，包括：</p><ul><li>Input（输入框）</li><li>Select（选择器）</li><li>Checkbox（复选框）</li><li>Radio（单选框）</li><li>DatePicker（日期选择器）</li><li>TimePicker（时间选择器）</li><li>Upload（上传）</li><li>Form（表单）</li><li>Switch（开关）</li><li>Slider（滑块）</li><li>Rate（评分）</li></ul><h3 id="数据展示" tabindex="-1">数据展示 <a class="header-anchor" href="#数据展示" aria-label="Permalink to &quot;数据展示&quot;">​</a></h3><p>数据展示组件用于呈现各种类型的数据，包括：</p><ul><li>Table（表格）</li><li>List（列表）</li><li>Card（卡片）</li><li>Calendar（日历）</li><li>Carousel（轮播）</li><li>Collapse（折叠面板）</li><li>Tree（树形控件）</li><li>Timeline（时间线）</li><li>Tag（标签）</li><li>Badge（徽标）</li><li>Avatar（头像）</li></ul><h3 id="导航组件" tabindex="-1">导航组件 <a class="header-anchor" href="#导航组件" aria-label="Permalink to &quot;导航组件&quot;">​</a></h3><p>导航组件用于页面导航和内容组织，包括：</p><ul><li>Menu（菜单）</li><li>Pagination（分页）</li><li>Breadcrumb（面包屑）</li><li>Tabs（标签页）</li><li>Steps（步骤条）</li><li>Dropdown（下拉菜单）</li></ul><h3 id="反馈组件" tabindex="-1">反馈组件 <a class="header-anchor" href="#反馈组件" aria-label="Permalink to &quot;反馈组件&quot;">​</a></h3><p>反馈组件用于操作后的反馈和交互，包括：</p><ul><li>Alert（警告提示）</li><li>Modal（对话框）</li><li>Notification（通知提示框）</li><li>Message（全局提示）</li><li>Progress（进度条）</li><li>Drawer（抽屉）</li><li>Popover（气泡卡片）</li><li>Tooltip（文字提示）</li><li>Skeleton（骨架屏）</li><li>Result（结果）</li><li>Spin（加载中）</li></ul><h2 id="构建系统" tabindex="-1">构建系统 <a class="header-anchor" href="#构建系统" aria-label="Permalink to &quot;构建系统&quot;">​</a></h2><p>XiHan UI 使用以下技术构建：</p><ul><li><strong>TurboRepo</strong>：用于任务编排和依赖管理</li><li><strong>Unbuild</strong>：用于打包生成 ESM 和 CommonJS 模块</li><li><strong>TypeScript</strong>：用于类型检查和编译</li><li><strong>Vite</strong>：用于本地开发和测试</li></ul><h2 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><p>XiHan UI 基于以下技术栈开发：</p><ul><li><strong>Vue 3</strong>：使用 Vue 3 的 Composition API 开发，提供更好的性能和类型推导</li><li><strong>TypeScript</strong>：全面使用 TypeScript 开发，提供完善的类型定义</li><li><strong>Vite</strong>：使用 Vite 作为构建工具，提供快速的开发体验</li><li><strong>SCSS</strong>：使用 SCSS 预处理器，提供更强大的样式组织能力</li><li><strong>JSX/TSX</strong>：部分组件使用 JSX/TSX 编写，提供更灵活的模板逻辑</li></ul><h2 id="浏览器兼容性" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h2><p>XiHan UI 支持所有现代浏览器，包括：</p><ul><li>Chrome</li><li>Firefox</li><li>Safari</li><li>Edge</li><li>Opera</li></ul><p>不支持 Internet Explorer 11 及以下版本。</p><h2 id="版本策略" tabindex="-1">版本策略 <a class="header-anchor" href="#版本策略" aria-label="Permalink to &quot;版本策略&quot;">​</a></h2><p>XiHan UI 采用 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义化版本</a> 进行版本管理：</p><ul><li>主版本号：包含不兼容的 API 变更</li><li>次版本号：包含向下兼容的功能性新增</li><li>修订号：包含向下兼容的问题修正</li></ul><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li><a href="./installation">安装指南</a>：了解如何在项目中引入和使用 XiHan UI</li><li><a href="./basic">基础组件</a>：探索 XiHan UI 的基础组件</li><li><a href="./theming">主题定制</a>：学习如何自定义组件库的主题样式</li></ul>`,46)])])}const g=i(s,[["render",t]]);export{c as __pageData,g as default};
