import{_ as n,c as e,o as s,ag as t}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"XiHan.Framework 框架概述","description":"","frontmatter":{},"headers":[],"relativePath":"cosmos/framework/overview.md","filePath":"cosmos/framework/overview.md","lastUpdated":1747783171000}'),r={name:"cosmos/framework/overview.md"};function i(o,a,l,p,d,h){return s(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="xihan-framework-框架概述" tabindex="-1">XiHan.Framework 框架概述 <a class="header-anchor" href="#xihan-framework-框架概述" aria-label="Permalink to &quot;XiHan.Framework 框架概述&quot;">​</a></h1><p>XiHan.Framework 是一个基于 .NET 的现代化后端开发框架，设计理念是为开发者提供一个高效、灵活且易于使用的开发平台。框架采用模块化设计，每个模块都专注于解决特定的问题，同时保持高度的可扩展性和可定制性。</p><h2 id="设计理念" tabindex="-1">设计理念 <a class="header-anchor" href="#设计理念" aria-label="Permalink to &quot;设计理念&quot;">​</a></h2><ul><li><strong>简约而不简单</strong>：提供简洁的 API 设计，降低学习成本，但不失功能的完整性</li><li><strong>约定优于配置</strong>：遵循&quot;约定优于配置&quot;的原则，减少冗余的配置代码</li><li><strong>模块化设计</strong>：各个功能模块可独立使用，也可无缝集成</li><li><strong>高性能</strong>：底层架构经过优化，保证在高并发场景下的稳定性能</li><li><strong>可扩展性</strong>：提供丰富的扩展点，方便开发者根据需求进行定制</li><li><strong>领域驱动</strong>：原生支持领域驱动设计(DDD)，便于构建复杂业务系统</li><li><strong>开发体验</strong>：注重开发者体验，提供丰富的工具和调试支持</li></ul><h2 id="核心模块" tabindex="-1">核心模块 <a class="header-anchor" href="#核心模块" aria-label="Permalink to &quot;核心模块&quot;">​</a></h2><h3 id="核心基础-core" tabindex="-1">核心基础 (Core) <a class="header-anchor" href="#核心基础-core" aria-label="Permalink to &quot;核心基础 (Core)&quot;">​</a></h3><p>提供框架的基础设施，包括依赖注入、配置管理、日志记录、事件总线等基础服务，是其他模块的基础。集成了最佳实践的异常处理和结果封装机制。</p><h3 id="数据访问-data" tabindex="-1">数据访问 (Data) <a class="header-anchor" href="#数据访问-data" aria-label="Permalink to &quot;数据访问 (Data)&quot;">​</a></h3><p>提供统一的数据访问层，支持 Entity Framework Core 和 SqlSugar，同时提供仓储模式、工作单元、软删除、多租户等企业级功能。支持领域模型映射和高效的查询优化。</p><h3 id="web-api" tabindex="-1">Web API <a class="header-anchor" href="#web-api" aria-label="Permalink to &quot;Web API&quot;">​</a></h3><p>基于 ASP.NET Core 的 Web API 开发框架，提供统一的 API 路由、请求处理、响应格式化、版本控制等功能。集成 Swagger 文档生成和 API 限流、监控等高级特性。</p><h3 id="身份认证-identity" tabindex="-1">身份认证 (Identity) <a class="header-anchor" href="#身份认证-identity" aria-label="Permalink to &quot;身份认证 (Identity)&quot;">​</a></h3><p>提供完善的身份认证和授权机制，支持 JWT、OAuth、OpenID Connect 等多种认证方式，以及基于角色和策略的授权功能。支持社交媒体登录和双因素认证。</p><h3 id="缓存-cache" tabindex="-1">缓存 (Cache) <a class="header-anchor" href="#缓存-cache" aria-label="Permalink to &quot;缓存 (Cache)&quot;">​</a></h3><p>提供统一的缓存接口，支持内存缓存、分布式缓存、Redis 等多种缓存实现。支持多级缓存策略和自动缓存失效，提高应用性能。</p><h3 id="后台任务-backgroundjobs" tabindex="-1">后台任务 (BackgroundJobs) <a class="header-anchor" href="#后台任务-backgroundjobs" aria-label="Permalink to &quot;后台任务 (BackgroundJobs)&quot;">​</a></h3><p>提供后台任务调度和执行框架，支持定时任务、队列任务、延迟任务等多种任务类型。支持任务重试、持久化和监控。</p><h3 id="消息队列-messagequeue" tabindex="-1">消息队列 (MessageQueue) <a class="header-anchor" href="#消息队列-messagequeue" aria-label="Permalink to &quot;消息队列 (MessageQueue)&quot;">​</a></h3><p>提供消息队列集成，支持 RabbitMQ、Kafka 等主流消息队列，实现系统间的解耦和异步处理。支持消息的序列化、重试和死信处理。</p><h3 id="文件存储-blobstoring" tabindex="-1">文件存储 (BlobStoring) <a class="header-anchor" href="#文件存储-blobstoring" aria-label="Permalink to &quot;文件存储 (BlobStoring)&quot;">​</a></h3><p>提供统一的文件存储抽象，支持本地文件系统、分布式文件系统、云存储等多种存储方式。支持文件上传、下载、管理等功能。</p><h3 id="ai-集成-ai" tabindex="-1">AI 集成 (AI) <a class="header-anchor" href="#ai-集成-ai" aria-label="Permalink to &quot;AI 集成 (AI)&quot;">​</a></h3><p>提供人工智能服务集成，支持主流的 AI 模型和服务，如 OpenAI、Azure AI 等。支持文本生成、图像处理、自然语言理解等功能。</p><h2 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><ul><li><strong>.NET 10</strong>：利用最新的 .NET 平台特性，提供高性能和跨平台支持</li><li><strong>Entity Framework Core</strong>：强大的 ORM 框架，简化数据访问层的开发</li><li><strong>SqlSugar</strong>：高性能、轻量级的 ORM 框架，提供更灵活的数据操作</li><li><strong>ASP.NET Core</strong>：高性能的 Web 框架，提供 Web API 开发支持</li><li><strong>Serilog</strong>：灵活的结构化日志记录框架，支持多种日志输出目标</li><li><strong>Mapster</strong>：高性能的对象映射工具，简化 DTO 和实体类之间的转换</li><li><strong>FluentValidation</strong>：流畅的验证库，提供请求数据的验证功能</li><li><strong>MediatR</strong>：轻量级中介者模式实现，支持请求/响应、发布/订阅模式</li><li><strong>Swagger/OpenAPI</strong>：API 文档生成工具，方便 API 的测试和集成</li><li><strong>Redis</strong>：高性能的分布式缓存解决方案</li><li><strong>JWT</strong>：基于 JSON Web Token 的认证方案</li><li><strong>Quartz.NET</strong>：强大的任务调度库，支持复杂的定时任务需求</li></ul><h2 id="架构图" tabindex="-1">架构图 <a class="header-anchor" href="#架构图" aria-label="Permalink to &quot;架构图&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+------------------------+        +------------------------+</span></span>
<span class="line"><span>|      表示层            |        |      外部服务/资源     |</span></span>
<span class="line"><span>| (Web API, gRPC, 前端)  |&lt;------&gt;| (第三方API, 存储, AI)  |</span></span>
<span class="line"><span>+------------------------+        +------------------------+</span></span>
<span class="line"><span>           |</span></span>
<span class="line"><span>+------------------------+</span></span>
<span class="line"><span>|      应用服务层        |</span></span>
<span class="line"><span>| (Application Services) |</span></span>
<span class="line"><span>+------------------------+</span></span>
<span class="line"><span>           |</span></span>
<span class="line"><span>+------------------------+        +------------------------+</span></span>
<span class="line"><span>|      领域层            |        |      基础设施层        |</span></span>
<span class="line"><span>| (Domain Model, 业务规则)|&lt;------&gt;| (Repository, 外部集成) |</span></span>
<span class="line"><span>+------------------------+        +------------------------+</span></span>
<span class="line"><span>                                           |</span></span>
<span class="line"><span>                                  +------------------------+</span></span>
<span class="line"><span>                                  |      持久化层          |</span></span>
<span class="line"><span>                                  | (Database, Cache, 文件)|</span></span>
<span class="line"><span>                                  +------------------------+</span></span></code></pre></div><h2 id="版本和兼容性" tabindex="-1">版本和兼容性 <a class="header-anchor" href="#版本和兼容性" aria-label="Permalink to &quot;版本和兼容性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>XiHan.Framework 版本</th><th>.NET 版本</th><th>支持状态</th></tr></thead><tbody><tr><td>1.0.x</td><td>.NET 10</td><td>正式发布</td></tr><tr><td>0.9.x</td><td>.NET 8/9</td><td>长期支持</td></tr><tr><td>0.8.x</td><td>.NET 7/8</td><td>维护支持</td></tr></tbody></table><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li><a href="./quickstart">快速入门</a>：了解如何在项目中集成和使用 XiHan.Framework</li><li><a href="./core">核心模块</a>：深入了解框架的核心模块和功能</li><li><a href="./data-access">数据访问</a>：学习如何使用框架的数据访问功能</li></ul>`,31)])])}const g=n(r,[["render",i]]);export{u as __pageData,g as default};
